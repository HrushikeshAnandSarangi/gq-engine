/**
 *
 *  OrderController.cc
 *  This file is generated by drogon_ctl
 *
 */
#include "OrderController.h"
#include <drogon/orm/Mapper.h>
#include <drogon/orm/DbClient.h>
#include <models/Orders.h>

void OrderController::create(const HttpRequestPtr &req,
                             std::function<void(const HttpResponsePtr &)> &&callback)
{
    
    auto json = req->getJsonObject();
    if (!json)
    {
        Json::Value error;
        error["error"] = "Invalid JSON format";
        auto resp = HttpResponse::newHttpJsonResponse(error);
        resp->setStatusCode(k400BadRequest);
        callback(resp);
        return;
    }
    drogon_model::gq_engine::Orders newOrder(*json);
    newOrder.setStatus("OPEN");
    auto dbClient = drogon::app().getDbClient();
    drogon::orm::Mapper<drogon_model::gq_engine::Orders> mapper(dbClient);
    
    mapper.insert(newOrder,
        [callback](const drogon_model::gq_engine::Orders &order) {
            Json::Value ret;
            ret["message"] = "Order accepted";
            ret["order_id"] = *order.getId(); 
            auto resp = HttpResponse::newHttpJsonResponse(ret);
            resp->setStatusCode(k200OK);
            callback(resp);
        },
        
        [callback](const drogon::orm::DrogonDbException &e) {
            Json::Value error;
            error["error"] = "Failed to save order";
            LOG_ERROR << e.base().what();
            auto resp = HttpResponse::newHttpJsonResponse(error);
            resp->setStatusCode(k500InternalServerError);
            callback(resp);
        });
}

void OrderController::showOrders(const HttpResponsePtr &req,
                                 std::function<void(const HttpResponsePtr &)> &&callback)
{
  auto dbClient=drogon::app().getDbClient();
  drogon::orm::Mapper<drogon_model::gq_engine::Orders>mapper(dbClient);
  mapper.findAll(
    [callback](const std::vector<drogon_model::gq_engine::Orders> &Orders){
      Json::Value jsonArray(Json::arrayValue);
      for(const auto &order : Orders){
        jsonArray.append(order.toJson());
        
      }
      auto resp=HttpResponse::newHttpJsonResponse(jsonArray);
      resp->setStatusCode(k200OK);
      callback(resp);
    };
    [callback](const drogon::orm::DrogonDbException &e){
      Json::Value error;
      error["error"]="Failed to fetch orders";
      LOG_ERROR<<e.base().what();
      auto resp = HttpResponse::newHttpJsonResponse(error);
      resp->setStatusCode(k500InternalServerError);
      callback(resp);
  }
  );
}

